HTTP简单介绍

URL是浏览器寻找信息时所需要的资源位置。通过URL，人类和应用程序才能找到、使用并共享因特网上大量的数据资源。
URL语法通过格式：
<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>
几乎没有那个URL中包含了所有这些组件。URL最重要的3个部分是方案(scheme)、主机(host)和路径(path).
常用介绍
方案 scheme：访问服务器以获取资源时要使用那种协议
主机 host:资源宿主服务器的主机名或点分IP地址
端口 prot:资源宿主服务器正在监听的端口号。很多方案都有默认端口号(HTTP的默认端口号为80)
路径 path:服务器上资源的本定名，有一个斜杠将其与前面的URL组件分隔开来。路径组件的语法是与服务器和方案有关的。
查询 query：某些方案会用这个组件传递参数以激活应用程序(如数据库、公告板、搜索引擎以及其他互联网网关)，查询组件的内容没有通用格式。
用字符？将其与URL的器与部分分隔开来。
片段 frag：一小片或一部分资源的名字，引用对象时，不会将frag字段传递给服务器，这个字段是在客户端内部使用的。通过字符“#”将其与URL的器与部分分隔开来。

1.方案--使用什么协议 
方案实际上是规定如何访问制定资源的主要标识符，它会告诉负责解析URL的应用程序应该使用什么协议。
方案组件必须以一个字母符号开始，有第一个“：”符号将其与URL的其余部分分隔开来。方案名是大小写无关的。
2.主机与端口号
要想在因特网上找到资源，应用程序要知道是那台即其装载了资源，以及在那台机器的什么地方可以找到能对目标资源进行访问的服务器。
主机组件表示了因特网上能够访问资源的宿主机器。可以使用主机名或IP地址来表示主机名。
端口组件标识了服务器正在监听的网络端口。对下层使用TCP协议的Http来说，默认端口号为80。
3.路径
URL的路径组件说明了资源位于服务器的什么地方。路径通常很像一个分级的文件系统路径。
4.查询字符串
通过提问题或者查询来缩小所请求资源类型的范围。
查询字符串以一系列“名/值”对的形式出现，名值对之间用字符“&”分隔

http报文
http是因特网的信使，那么HTTP报文就是它用来搬东西的包裹。
HTTP报文是在HTTP应用程序之间发送的数据块。这些数据块以一些文本形式元信息开头，这些信息描述了报文的内容及含义，后面跟着可选的数据部分。
这些报文在客户端、服务器和代理之间流动。
HTTP使用流入和流出来描述是无处理的方向。

报文向下游流动
HTTP报文会像河水一样流动，不管是请求报文还是响应报文，所有报文都会向下游流动。所有报文的发送者都在接受者的上游。

报文的组成部分
HTTP报文是简单的格式化数据块。
每条报文都包含一条来自客户端的请求，或者一条来自服务器的响应。

三部分组成：
1.对报文进行描述的起始行(start line)
2.包含属性的首部块(header)
3.可选的、包含数据的主题部分(body)
由一个回车符和一个换行符分隔

请求报文的格式
<method> <request-URL> <version>
<headers>

<entiry-body>

响应报文的格式
<version> <status> <reason-phrase>
<headers>

<entiry-body>
简要描述：
方法(method)
  客户端希望服务器对资源执行的动作。是一个单独的词，比如GET、HEAD或POST。
请求URL(request-URL)
  命名了所请求资源，或者URL路径组件的完整URL。如果直接与服务器进行对化，只要URL的路径组件是资源的绝对路径，
  通常就不会有什么问题--服务器可以假定自己是URL的主机/端口
版本(version)
  报文所使用的HTTP版本，其格式看起来是这样的：
  HTTP/<major>.<minor>
  其中主要版本号(major)和次要版本号(minor)都是整数。
状态码(status-code)
  这三位数字描述了请求过程中所发生的情况。每个请求状态码的第一位数字都用于描述状态的一般类别。
原因短语(reason-phrase)
  数字状态码的可读版本，包含行终止序列之前的所有文本。
首部(header)
  可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号(:),然后是一个可选的空格，接着是一个值，最后时一个CRLF。
  首部是由一个空行(CRLF)结束的，表示了首部列表的结束和实体主题部分的开始。
实体的主题部分(entity-body)
  实体的主题部分包含一个由任意数据组成的数据块。并不是所有的报文都包含实体的主题部分，有时，报文只是一个CRLF结束。

起始行
所有的HTTP报文都以一个起始行作为开始。请求报文的起始行说明了要做些什么。响应报文的起始行说明发生了什么。
  请求行
    请求报文请求服务器对资源进行一些操作。请求报文的起始行，或称为请求行，包含了一个方法和一个请求URL，这个方法描述了服务器应该执行的操作，
    请求URL描述了要对那个资源执行这个方法。请求行中还包含HTTP的版本，用来告知服务器，客户端使用的是哪种HTTP。


请求首部
   请求首部只在请求报文中有意义的首部。用于说明是谁或什么在发送请求、请求源来自何处，或者客户端的喜好及能力。服务器可以根据请求首部给出的客户端信息。
试着为客户端提供更好的响应。

Request请求参数的编码问题
1.POST方法请求编码处理
  如果客户端没有在Content-type标头中设置字符编码信息(例如浏览器可以设置Content-Type:text/html;charset=UTF-8),此时使用HttpServletRequest的
  getCharachterEncoding()返回值是null。在这个情况下，容器若使用的默认编码处理是ISO-8859-1，而客户端使用UTF-8发送非ASCII字符的请求参数，Servlet直接
  使用getParameter()等方法取得该请求参数值，就会是不正确的结果也就是得到乱码。
  可以使用HttpServletRequest的setCharacterEncoding()方法指定取得POST请求参数时使用的编码。
  request.setCharacterEncoding("UTF-8");
  //解码
  相当于要求容器作这个操作：String text = java.net.URLDecoder.decode("要转码的参数","UTF-8");
  //编码
  String text = java.net.URLDecoder.decode("原始字符","ISO-8859-1");
一定要在取得任何请求参数前执行request.setCharacterEncoding("UTF-8")方法才有作用。
2.GET请求参数编码处理
setCharacterEncoding()方法只对body中字符编码才有作用，也就是基本上这个方法值对POST产生作用，当请求是GET发送时，则没有定义这个方法是否会影响容器处理
编码的方式(就其原因，是因为处理URL的是HTTP服务器，而非Web容器)。
在Tomcat在GET时，使用setCharacterEncoding()方法设置编码就不会有作用，取得请求参数时仍会产生乱码。
原因是post请求和get请求存放参数位置是不同的：

post方式参数存放在请求数据包的消息体中。get方式参数存放在请求数据包的请求行的URI字段中，以？开始以param=value&parame2=value2的形式附加在URI字段之后。
而request.setCharacterEncoding(charset); 只对消息体中的数据起作用，对于URI字段中的参数不起作用，我们通常通过下面的代码来完成编码转换
   
    String paramValue = request.getParameter("paramName");  
    paramValue = new String(paramValue.trim().getBytes("ISO-8859-1"), charset);  

对于全局请求不管GET或者POST都需要在filter过滤器中doFilter方法中设置，比如：这里并不严格
	request.setCharacterEncoding("UTF-8");
		if(request.getMethod().equals("GET")){
			//设置GET方法参数编码为UTF-8,通过装饰类MyServletRequestWrapper来改变request对象的请求参数编码
			request=new MyServletRequestWrapper(request);
		}

servlet中的请求转发
		
servlet中的请求转发主要有三种方式：
1、  forward：是指转发，将当前request和response对象保存，交给指定的url处理。并没有表示页面的跳转，所以地址栏的地址不会发生改变。

2、  redirect：是指重定向,包含两次浏览器请求，浏览器根据url请求一个新的页面，所有的业务处理都转到下一个页面，地址栏的地址会变发生改变。

3、  include：意为包含，即包含url中的内容，进一步理解为，将url中的内容包含进当前的servlet当中来，并用当前servlet的request和respose来执行
url中的内容处理业务.所以不会发生页面的跳转，地址栏地址不会发生改变。

redirect与include、forward的区别在于是不是同一个Request，redirect会有两次交互。
include与forward的区别在于输出的内容，include包含本身servlet与跳转页面内容的结果，而forward不包含本身servlet的内容。

servlet请求转发与重定向的区别：
request.setAttribute("test","hello");
request.getRequestDispacther("/test.jsp").forword(request,response); 
response.sendRedirect("test.jsp");
一、显示结果：
1、当用request.getRequestDispacther("/test.jsp").forword(request,response); 请求转发后，结果页面输出：hello
2、当用response.sendRedirect("test.jsp");重定向后，结果页面输出：null
二、底层分析：
1、请求转发（RequestDispatcher）的过程：
         客户首先发送一个请求到服务器端，服务器端发现匹配的servlet，并指定它去执行，当这个servlet执行完之后，它要调用getRequestDispacther()方法，
         把请求转发给指定的test.jsp,整个流程都是在服务器端完成的，而且是在同一个请求里面完成的，因此servlet和jsp共享的是同一个request，在servlet里面放的所有东西，在jsp中都能取出来，因此，jsp能把结果getAttribute()出来，getAttribute()出来后执行完把结果返回给客户端。整个过程是一个请求，一个响应。
2、重定向（sendRedirect）的工作原理：
     客户发送一个请求到服务器，服务器匹配servlet，这都和请求转发一样，servlet处理完之后调用了sendRedirect()这个方法，这个方法是response的方法，所以，当这个servlet处理完之后，看到response.senRedirect()方法，立即向客户端返回这个响应，响应行告诉客户端你必须要再发送一个请求，去访问test.jsp，
     紧接着客户端受到这个请求后，立刻发出一个新的请求，去请求test.jsp,这里两个请求互不干扰，相互独立，在前面request里面setAttribute()的任何东西，在后面的request里面都获得不了。可见，在sendRedirect()里面是两个请求，两个响应。
     
     这个方法会在响应中设置HTTP状态码301以及Location标头，浏览器接受到这个标头，会重新使用GET方法请求指定的URL，因此地址栏上会反线URL的变更。
三、表面分析：
	1、当用RequestDispatcher请求转发后，地址栏为http://localhost:8080/test/TestServlet
这真好应正了上面的分析，我们起初请求的就一个servlet，至于你服务器端怎么转，流程怎么样的，我客户端根本就不知道，我发了请求后我就等
着响应，那你服务器那边愿意怎么转就怎么转，我客户端不关心也没法知道，所以当服务器端转发到jsp后，它把结果返回给客户端，客户端根本就
不知道你这个结果是我真正访问的servlet产生的，还是由servlet转发后下一个组件产生的。
	2、当用sendRedirect重定向后，地址栏为http://localhost:8080/test/test.jsp
因为这个时候，客户端已经知道了他第二次请求的是test.jsp，服务器已经告诉客户端要去访问test.jsp了，所以地址栏里会显示想要访问的结果。

如果在处理请求的过程中发现一些错误，而你想要传送服务器默认的状态与错误信息，可以使用sendError()方法。
由于利用到HTTP状态码，要求浏览器重定向网页，因此，sendError()方法同样必须在未确认输出前执行，否则会抛出IllegalStateException

response.sendError(404);


为什么需要异步请求处理？

当客户端发送一个请求，服务端接受到这个请求，由于该请求在服务器端需要复杂或耗时比较长的处理，有时候需要开启其他线程进行请求的处理。
此时就可以通过使用异步请求处理的功能。

如何在Servlet中使用异步请求处理？

1.首先，在web.xml中的servlet中配置,如果有filter拦截到的servlet需要异步请求处理，则filter配置中也需要配置这个参数。这样才能支持异步请求处理。
 <async-supported>true</async-supported>
 
2.通过request.startAsync()或request.startAsync(request, response)来初始化异步请求上下文对象AsyncContext。
AsyncContext asyncContextOriginal =request.startAsync();
AsyncContext asyncContextWapper =request.startAsync(request, response);
上面两种的取得AsyncContext的区别：
1.request.startAsync();使用的是原始的ServeltReqeust和ServletResponse对象，即没有使用ServletRequestWrapper或ServletResponseWrapper
实例，这样即使过滤器或者其他方面使用了包装器，得到的AsyncContext也是用原始的ServeltReqeust和ServletResponse对象，不会产生包装效果。
2.request.startAsync(request, response);则不一样，参数request，response可以是包装后的，产生包装效果。

3.AsyncContext 介绍
如果Servlet或过滤器的asyncSupported被标示为true，则它们支持异步请求处理，在不支持异步处理的Servlet或过滤器中调用startAsync（)，会抛出
IllegalStateException.
当在支持异步处理的Servlet或过滤器中调用请求对象的startAsync()方法时，该次请求会离开容器所分配的线程，这意味这必须响应处理流程会返回，也就是若有
过滤器，也会依序返回(也就是各自完成的doFilter()方法)，但最终的响应被延迟。
可以调用AsyncContext的complete()方法完成响应，而后调用forward()方法，将响应转发给别的Servlet/JSP处理。
或者直接使用AsyncContext.dispatcher()或AsyncContext.dispatcher(String path)方法转发。
不可同时调用complete和dispatcher方法

如果对AsyncContext的起始、完成、超时或错误发生等事件有兴趣，可以实现AsyncListener，使用AsyncContext的addListener()方法加入该监听器。
